local ffi = require "ffi"
local loader = require "ffi.loader"
describe("no ios", function()
    before_each(function()
        loader.is_ios = false
    end)
    after_each(function()
        loader.is_ios = true
    end)
    describe('find lua cpath', function()
        it('no ext', function()
            local sb = stub(loader, 'loadlib')
            assert.has_error(function()
                ffi.load("fuck")
            end)
            assert.stub(sb).called(2)
            assert.stub(sb).called_with("fuck.so", nil, package.cpath)
            assert.stub(sb).called_with("fuck", nil, package.cpath)
        end)
        it('ext', function()
            local sb = stub(loader, 'loadlib')
            assert.has_error(function()
                ffi.load("fuck.so")
            end)
            assert.stub(sb).called(1)
            assert.stub(sb).called_with("fuck.so", nil, package.cpath)
        end)
    end)
    describe('find lua path', function()
        it('no ext', function()
            local sb = stub(loader, 'loadlib')
            assert.has_error(function()
                ffi.load("fuck", nil, true)
            end)
            assert.stub(sb).called(4)
            assert.stub(sb).called_with("fuck.so", nil, package.cpath)
            assert.stub(sb).called_with("fuck", nil, package.cpath)
            assert.stub(sb).called_with("fuck.so", nil, package.path)
            assert.stub(sb).called_with("fuck", nil, package.path)
        end)
        it('ext', function()
            local sb = stub(loader, 'loadlib')
            assert.has_error(function()
                ffi.load("fuck.so", nil, true)
            end)
            assert.stub(sb).called(2)
            assert.stub(sb).called_with("fuck.so", nil, package.cpath)
            assert.stub(sb).called_with("fuck.so", nil, package.path)
        end)
    end)
end)

describe("ios", function()
    before_each(function()
        loader.is_ios = true
    end)
    after_each(function()
        loader.is_ios = false
    end)
    describe('find lua cpath', function()
        it('no ext', function()
            local sb = stub(loader, 'loadlib')
            assert.has_error(function()
                ffi.load("fuck")
            end)
            assert.stub(sb).called(3)
            assert.stub(sb).called_with("fuck.so", nil, package.cpath)
            assert.stub(sb).called_with("fuck.dylib", nil, package.cpath)
            assert.stub(sb).called_with("fuck", nil, package.cpath)
        end)
        it('ext', function()
            local sb = stub(loader, 'loadlib')
            assert.has_error(function()
                ffi.load("fuck.so")
            end)
            assert.stub(sb).called(2)
            assert.stub(sb).called_with("fuck.dylib", nil, package.cpath)
            assert.stub(sb).called_with("fuck.so", nil, package.cpath)
        end)
    end)
    describe('find lua path', function()
        it('no ext', function()
            local sb = stub(loader, 'loadlib')
            assert.has_error(function()
                ffi.load("fuck", nil, true)
            end)
            assert.stub(sb).called(6)
            assert.stub(sb).called_with("fuck.so", nil, package.cpath)
            assert.stub(sb).called_with("fuck", nil, package.cpath)
            assert.stub(sb).called_with("fuck.dylib", nil, package.cpath)

            assert.stub(sb).called_with("fuck.so", nil, package.path)
            assert.stub(sb).called_with("fuck", nil, package.path)
            assert.stub(sb).called_with("fuck.dylib", nil, package.path)

        end)
        it('ext', function()
            local sb = stub(loader, 'loadlib')
            assert.has_error(function()
                ffi.load("fuck.so", nil, true)
            end)
            assert.stub(sb).called(4)
            assert.stub(sb).called_with("fuck.so", nil, package.cpath)
            assert.stub(sb).called_with("fuck.so", nil, package.path)
            assert.stub(sb).called_with("fuck.dylib", nil, package.cpath)
            assert.stub(sb).called_with("fuck.dylib", nil, package.path)
        end)
    end)
end)
